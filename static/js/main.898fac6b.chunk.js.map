{"version":3,"sources":["components/TilesGame/TilesGame.module.css","components/TilesGame/Card/Card.module.css","redux/tile-game-reducer.js","components/TilesGame/Card/Card.jsx","components/TilesGame/Modal/Modal.jsx","components/TilesGame/TilesGame.jsx","components/TilesGame/TilesGameContainer.js","common/array-handlers.js","App.js","redux/store.js","index.js","components/TilesGame/Modal/Modal.module.css"],"names":["module","exports","initialState","cardsImages","fieldWidth","fieldHeight","cards","movesCount","cardsSolved","gameIsFinished","INITIALIZE_GAME","FINISH_THE_GAME","SET_CARD_OPENED","SET_CARDS_SOLVED","SET_CARDS_CLOSED","ROUND_FINISHED","Card","content","id","opened","solved","openCard","className","cn","classes","cardContainer","openedCard","solvedCard","onClick","card","cardContent","String","fromCodePoint","cardBack","Modal","initializeGame","wrapper","modalWindow","congratulation","button","TilesGame","Fragment","cardField","map","roundsMessage","TilesGameContainer","props","prepareCards","n","cardsContent","sort","Math","random","slice","arr","j","temp","i","length","floor","shuffleArr","concat","cardsForGame","push","handleRound","state","firstCard","secondCard","setCardsSolved","setState","roundFinished","setCardsClosed","cardId","setCardOpened","setTimeout","this","prevProps","finishTheGame","React","Component","mapDispatchToProps","type","guesed","connect","tiles","App","reducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.898fac6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardField\":\"TilesGame_cardField__3sH6w\",\"roundsMessage\":\"TilesGame_roundsMessage__3ZLHu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContainer\":\"Card_cardContainer__3AnvL\",\"openedCard\":\"Card_openedCard__k58TP\",\"card\":\"Card_card__3NBJW\",\"solvedCard\":\"Card_solvedCard__3ZLjT\",\"cardBack\":\"Card_cardBack__2-0Vx\",\"cardContent\":\"Card_cardContent__1Ysp8\"};","const initialState = {\r\n    cardsImages: [ 0x1F42E, 0x1F42A, 0x1F428, 0x1F998, 0x1F408, 0x1F437, 0x1F439,\r\n        0x1F43C, 0x1F986, 0x1F425, 0x1F438, 0x1F419, 0x1F41D, 0x1F41E], // Here are some hardcoded emojis. We can use any images, colors and etc.\r\n    fieldWidth: 4, //Here we can customize the size of our field, for example adding dropdown menu with difficulty levels to UI\r\n    fieldHeight: 4,\r\n    cards: [],\r\n    movesCount: null,\r\n    cardsSolved: 0,\r\n    gameIsFinished: false\r\n}\r\n\r\n//Action creators:\r\nconst INITIALIZE_GAME = 'INITIALIZE_GAME';\r\nexport const initializeGame = (cardsForGame) => ({type: INITIALIZE_GAME, cardsForGame})\r\n\r\nconst OPEN_CARD = 'OPEN_CARD';\r\nexport const openCard = (cardId) => ({type: OPEN_CARD, cardId})\r\n\r\nconst FINISH_THE_GAME = 'FINISH_THE_GAME';\r\nexport const finishTheGame = () => ({type: FINISH_THE_GAME})\r\n\r\nconst SET_CARD_OPENED = 'SET_CARD_OPENED';\r\nexport const setCardOpened = (cardId) => ({type: SET_CARD_OPENED, cardId})\r\n\r\nconst SET_CARDS_SOLVED = 'SET_CARDS_SOLVED';\r\nexport const setCardsSolved = (firstCard, secondCard) => ({type: SET_CARDS_SOLVED, firstCard, secondCard})\r\n\r\nconst SET_CARDS_CLOSED = 'SET_CARDS_CLOSED';\r\nexport const setCardsClosed = (firstCard, secondCard) => ({type: SET_CARDS_CLOSED, firstCard, secondCard})\r\n\r\nconst ROUND_FINISHED = 'ROUND_FINISHED';\r\nexport const roundFinished = (guesed) => ({type: ROUND_FINISHED, guesed})\r\n\r\nexport const gameReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZE_GAME :\r\n            return {...state, cards: action.cardsForGame, movesCount: 0, cardsSolved: 0, gameIsFinished: false}\r\n        case SET_CARD_OPENED :\r\n            return {...state,\r\n                cards: state.cards.map(card => card.id === action.cardId ? {...card, opened: true} : card)}\r\n        case FINISH_THE_GAME :\r\n            return {...state, gameIsFinished: true, cards: state.cards.map(card => ({...card, opened: false}))}\r\n        case SET_CARDS_SOLVED :\r\n            return {...state,\r\n                cards: state.cards.map(card => (card.id === action.firstCard || card.id === action.secondCard) ? {...card, solved: true} : card)}\r\n        case SET_CARDS_CLOSED :\r\n            return {...state,\r\n                cards: state.cards.map(card => (card.id === action.firstCard || card.id === action.secondCard) ? {...card, opened: false} : card)}\r\n        case ROUND_FINISHED :\r\n            return action.guesed ? {...state, movesCount: state.movesCount + 1, cardsSolved: state.cardsSolved + 2} : {...state, movesCount: state.movesCount + 1}\r\n        default: return state\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport classes from './Card.module.css'\r\nimport cn from 'classnames';\r\n\r\n//This is clean functional component, that return JSX of single card. This component can be reused and easily tested\r\n\r\nconst Card = ({content, id, opened, solved, openCard}) => (\r\n        <div className={cn(classes.cardContainer, opened && classes.openedCard, solved && classes.solvedCard)}\r\n        onClick={()=>{!solved && openCard(id)}}>\r\n            <div className={classes.card}>\r\n                <div className={classes.cardContent}>\r\n                    {String.fromCodePoint(content)}\r\n                </div>\r\n                <div className={classes.cardBack}></div>\r\n            </div>\r\n        </div>\r\n)\r\nexport default Card;","import React from 'react'\r\nimport classes from './Modal.module.css';\r\n\r\n\r\nconst Modal = ({initializeGame, movesCount}) => (\r\n    <div className={classes.wrapper}>\r\n        <div className={classes.modalWindow}>\r\n            <h1 className={classes.congratulation}>Congratulations, you won in {movesCount} rounds!</h1>\r\n            <button className={classes.button} onClick={()=> {initializeGame()}}>Play again</button>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Modal;","import React from 'react';\r\nimport Card from \"./Card/Card\";\r\nimport classes from './TilesGame.module.css'\r\nimport Modal from './Modal/Modal';\r\n\r\n//This is clean presentational component, that gets props and returns JSX\r\n//Modal Window is showed, if game was finished\r\n\r\nconst TilesGame = ({cards, openCard, movesCount, gameIsFinished, initializeGame}) => (\r\n        <React.Fragment>\r\n            <div className={classes.cardField}>\r\n                {cards.map(card => <Card key={card.id} {...card} openCard={openCard}/>)}\r\n            </div>\r\n            <h1 className={classes.roundsMessage}>Rounds: {movesCount}</h1>\r\n            {gameIsFinished && <Modal initializeGame={initializeGame} movesCount={movesCount}/>}\r\n        </React.Fragment>\r\n    )\r\n\r\n\r\nexport default TilesGame;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getRandomElements, shuffleArr } from '../../common/array-handlers';\r\nimport { initializeGame, setCardOpened, setCardsSolved, setCardsClosed, roundFinished, finishTheGame } from '../../redux/tile-game-reducer'\r\nimport TilesGame from './TilesGame';\r\n\r\n//This container component connects our UI of Tiles Game to Redux store and processing whole game logic to keep our presentational component clean\r\n//This component can be refactored to Functional component with useState and useEffect hooks\r\n//If needed all logical methods can be moved to separated modules\r\n\r\nclass TilesGameContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            firstCard: null,//This local state is needed to store temporary data about selected cards. This data also can be stored in global Redux store\r\n            secondCard: null\r\n        }\r\n    }\r\n    prepareCards = () => {\r\n        let cardsContent = getRandomElements(this.props.fieldHeight * this.props.fieldWidth / 2, this.props.cardsImages); //Choosing random pictures\r\n        cardsContent = shuffleArr(cardsContent.concat(cardsContent));\r\n        let cardsForGame = [];//Creating an array of cards for the game with random pictures\r\n        for (let i = 0; i < cardsContent.length; i++) {\r\n            cardsForGame.push({ content: cardsContent[i], id: i, opened: false, solved: false })\r\n        }\r\n        this.props.initializeGame(cardsForGame);\r\n    }\r\n    handleRound = () => {//Logic, that is provided when second picture was picked\r\n        if (this.props.cards[this.state.firstCard].content === this.props.cards[this.state.secondCard].content) {\r\n            this.props.setCardsSolved(this.state.firstCard, this.state.secondCard);\r\n            this.setState({ firstCard: null, secondCard: null });\r\n            this.props.roundFinished(true)\r\n        } else {\r\n            this.props.roundFinished(false);\r\n            this.props.setCardsClosed(this.state.firstCard, this.state.secondCard);\r\n            this.setState({ firstCard: null, secondCard: null });\r\n        }\r\n    }\r\n    openCard = (cardId) => {\r\n        if (this.state.firstCard === null) {\r\n            this.setState({ firstCard: cardId });\r\n            this.props.setCardOpened(cardId);\r\n        } else {\r\n            if (this.state.secondCard === null && cardId !== this.state.firstCard) {\r\n                this.setState({ secondCard: cardId });\r\n                this.props.setCardOpened(cardId);\r\n                setTimeout(() => { this.handleRound() }, 700)//Delay of round processing can be changed here\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.prepareCards();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        (prevProps.cardsSolved !== this.props.cardsSolved) && (this.props.cardsSolved === this.props.cards.length)\r\n        && this.props.finishTheGame() // Checking if all cards were solved\r\n    }\r\n    render() {\r\n        return (\r\n                <TilesGame\r\n                    cards={this.props.cards}\r\n                    openCard={this.openCard}\r\n                    movesCount={this.props.movesCount}\r\n                    gameIsFinished={this.props.gameIsFinished}\r\n                    initializeGame={this.prepareCards} />\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    cards: state.tiles.cards,\r\n    cardsSolved: state.tiles.cardsSolved,\r\n    movesCount: state.tiles.movesCount,\r\n    gameIsFinished: state.tiles.gameIsFinished,\r\n    fieldHeight: state.tiles.fieldHeight,\r\n    fieldWidth: state.tiles.fieldWidth,\r\n    cardsImages: state.tiles.cardsImages\r\n})\r\nconst mapDispatchToProps = { initializeGame, setCardOpened, setCardsSolved, setCardsClosed, finishTheGame, roundFinished }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TilesGameContainer)","export const shuffleArr = (arr) => {\r\n\tlet j, temp;\r\n\tfor(var i = arr.length - 1; i > 0; i--){\r\n\t\tj = Math.floor(Math.random()*(i + 1));\r\n\t\ttemp = arr[j];\r\n\t\tarr[j] = arr[i];\r\n\t\tarr[i] = temp;\r\n\t}\r\n\treturn arr;\r\n}\r\n\r\nexport const getRandomElements = (n, arr) => arr.sort(() => 0.5 - Math.random()).slice(0, n);","import './App.css';\nimport TilesGameContainer from './components/TilesGame/TilesGameContainer';\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TilesGameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers, createStore } from \"redux\";\r\nimport { gameReducer } from './tile-game-reducer';\r\n\r\n\r\nlet reducers = combineReducers({\r\n    tiles: gameReducer\r\n})\r\n\r\nconst store = createStore(reducers);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  \n    <Provider store={store}>\n      <App />\n    </Provider>\n    ,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Modal_wrapper__3qHpt\",\"modalWindow\":\"Modal_modalWindow__3YeYZ\",\"congratulation\":\"Modal_congratulation__1Nn0w\",\"button\":\"Modal_button__2zR_g\"};"],"sourceRoot":""}